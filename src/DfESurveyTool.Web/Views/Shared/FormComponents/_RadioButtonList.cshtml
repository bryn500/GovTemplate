@model string

@{
    OptionsViewModel optionsModel = (OptionsViewModel)ViewData["RadioQuestion"];
    var propName = ViewData.TemplateInfo.HtmlFieldPrefix;
    var hasError = ViewData.FieldHasError(propName);
    var describedBy = !string.IsNullOrEmpty(optionsModel.Hint) ? hasError ? $"{propName}-hint {propName}-error" : $"{propName}-hint" : "";
}

<div class="govuk-form-group@(hasError ? " govuk-form-group--error" : "")">
    <fieldset class="govuk-fieldset" aria-describedby="@describedBy">
        <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
            <span class="govuk-fieldset__heading govuk-label govuk-!-font-weight-bold">
                @optionsModel.Question
            </span>
        </legend>
        @if (!string.IsNullOrEmpty(optionsModel.Hint))
        {
            <div id="@propName-hint" class="govuk-hint">
                <p>@optionsModel.Hint</p>
            </div>
        }
        @if (hasError)
        {
            <span id="@propName-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span><span asp-validation-for="@Model" class="govuk-error-message"></span>
            </span>
        }
        <div class="govuk-radios govuk-radios--inline">
            @{ 
                var i = 0;
            }
            @foreach (var radio in optionsModel.Options)
            {
                var id = i == 0 ? "" : "." + i.ToString();
                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" asp-for="@Model" type="radio" id="@propName@id" value="@radio.Value">
                    <label class="govuk-label govuk-radios__label" for="@propName.@id">
                        @radio.Text
                    </label>
                </div>
                i++;
            }
        </div>
    </fieldset>
</div>